타입스크립트의 파일을 컴파일링함ㄱ뫄 동시에 node로 실행까지 한 번에 시켜줄 수 있는 앱
npm i ts-node
npm i ts-node -g

ts-node 경로

Compiling Option
:상황에 따라서 어떤 경우 A 컴파일링 / B 컴파일링
tsc --init

ts파일=> 컴파일링 /
완료된 js 버전 결정하는 옵션 target

ES

모듈!!
 Node.js => JS 모듈 정식 표준 설정/생성x
CommonJS
>import = require / export = exports.객체


1.typescript 주석
-JS 타입 종류 : 
1) 원시타입: number,string,boolean,null,nudefined
2) 참조타입: object, array, function

2.TS 타입추론
-주석을 달지 않아도 됨
(하지만 특별한 케이스에서는 달아야함)

3.TS 치트키 (*any타입)

4.TS
-JS vs => undefined / null : value
-TS => undefined / null : type

5.TS 타입의 종류 분류
-Super Type : 받을 수 있는 값이 많아짐
-Sub Type : 받을 수 있는 값이 적어짐

6.TS 객체 타입 정의
object타입 = 객체의 any (객체계의 치트키)
-interface => 객체 안에 들어가있는 각각의 key & value 타입 정의
-optiona property => 선택적 속성(객체안에 있어도 되고 없어도 되는 값에 대한 타입을 정의하고자 할 때)
- 익명 interface => 이름을 부여하지 않은 interface가 존재한다.

7. Class 타입 정의하기
- 붕어빨틀 / 붕어빵
- 동일한 혹은 유사한 형태의 객체가 많이 필요한 상황에서 매번 해당 객체를 신규로 생성해야하는 그 불편함을 해소하기 위해서
-new Class()

8.interface 응용
-interface: 객체의 세부타입 정의
-class 선언 할 때 참고 활용
-claas가 interface를 참고해서 객체를 구현할 때에는

9.추상클래스
-추상화
-추상 <-> 명확,명쾌
- 어떤 사물이나 개념에서 공통점을 찾아서 추출한 형이상학적인 개념

객체를 생성하는데 있어서 객체의 세부적인 값들이 완전히 똑같아야할 수도 있지만 특정요소 몇가지만 다르고 나머지는 거의 동일한 구성형태를 띄고있는 객체를 만들어야하는 상황이 나올 수 있음

약간의 차이점 때문에 class를 다시 생성해야하는가?